package com.evanbelcher.TextToText;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.text.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 * @author Evan Belcher
 */
public class Main extends JPanel {
	
	private static final long serialVersionUID = 1L;//for serializability
	private static Point frameSize = new Point(850, 1000);//width,height. height will be changed to reflect the length of the text
	private static JFrame frame;//frame or window holding the body of the application
	
	//final static String FILE_NAME = "C:/Users/Evan/Downloads/noway.txt";
	//final static String FILE_NAME = "C:/Users/Evan/Downloads/printtextmessages32.txt";
	
	final static String SEPARATOR = "===================";//string used by the app to separate messages
	final static String BEGINNING = "Auto-generated with the Email Text Messages app for Android // www.emailtextmessages.net\n";//header generated by app
	
	//Hangouts colors
	final static Color BLACK = new Color(38, 50, 56);
	final static Color OFF_WHITE = new Color(236, 239, 241);
	final static Color GREEN = new Color(15, 157, 88);
	final static Color GREY = new Color(207, 216, 220);
	
	//Fonts
	static Font titleFont = new Font("Dialog", Font.BOLD, 24);
	static Font normalFont = new Font("Dialog", Font.PLAIN, 16);
	
	public static LinkedList<Text> textMessages = new LinkedList<Text>();//List of texts
	static Main main;//The panel, used to draw the image
	public static String otherGuy = "Them";//sender name
	public static String wholeText = "";
	public static String hangoutsText = "";
	public static String pngFileName;
	
	public static void main(String[] args) throws InterruptedException, IOException, ParseException {
		
		try {
			Font f = Font.createFont(Font.TRUETYPE_FONT, new File("D:/Windows/Downloads/OpenSansEmoji-master/OpenSansEmoji-master/OpenSansEmoji.ttf"));
			titleFont = f.deriveFont(Font.BOLD, 36);
			normalFont = f.deriveFont(Font.PLAIN, 24);
		} catch (FontFormatException e) {
			e.printStackTrace();
		}
		
		JTextField nameField = new JTextField(10);
		JTextField fileField = new JTextField(10);
		JTextArea smsMessageArea = new JTextArea(5000, 20);
		JScrollPane smsMessageScroll = new JScrollPane(smsMessageArea);
		JTextArea hangoutsMessageArea = new JTextArea(5000, 20);
		JScrollPane hangoutsMessageScroll = new JScrollPane(hangoutsMessageArea);
		smsMessageScroll.setPreferredSize(new Dimension(240, 300));
		hangoutsMessageScroll.setPreferredSize(new Dimension(240, 300));
		
		JCheckBox printScreenshot = new JCheckBox("Print Screenshot?", true);
		JCheckBox printData = new JCheckBox("Print Data?", false);
		
		JPanel myPanel = new JPanel();
		myPanel.add(new JLabel("Other person's name:"));
		myPanel.add(nameField);
		myPanel.add(new JLabel("File name:"));
		myPanel.add(fileField);
		myPanel.add(Box.createHorizontalStrut(15));// a spacer
		myPanel.add(new JLabel("SMS Message:"));
		myPanel.add(smsMessageScroll);
		myPanel.add(new JLabel("Hangouts Message:"));
		myPanel.add(hangoutsMessageScroll);
		myPanel.add(printScreenshot);
		myPanel.add(printData);
		
		int result = JOptionPane.showConfirmDialog(null, myPanel, "Text to Text Dialog", JOptionPane.OK_CANCEL_OPTION);
		if (result == JOptionPane.CANCEL_OPTION || (smsMessageArea.getText().trim().isEmpty() && hangoutsMessageArea.getText().trim().isEmpty()))
			System.exit(0);
			
		otherGuy = nameField.getText();
		wholeText = smsMessageArea.getText();
		hangoutsText = hangoutsMessageArea.getText();
		pngFileName = fileField.getText();
		if (!hangoutsText.trim().isEmpty())
			parseHangoutsToSMS();
		if (printScreenshot.isSelected())
			createScreenshot();
		if (printData.isSelected())
			printData();
	}
	
	private static void parseHangoutsToSMS() throws ParseException {
		wholeText += "\n";
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		DateFormat df2 = new SimpleDateFormat("EEE dd MMM yyyy - hh:mm:ss aa");
		
		for (String line : hangoutsText.split("(?m)^20\\d\\d")) {//"(?m)^2013-|(?m)^2014|(?m)^2015"
			line = line.trim();
			if (line.isEmpty())
				continue;
			if (line.contains("***"))
				continue;
				
			wholeText += SEPARATOR + "\n\n";
			String dateString = "2015" + line.split("<")[0].trim();
			Date d = df.parse(dateString);
			String newDateString = df2.format(d);
			wholeText += newDateString + "\n";
			System.out.println("2015" + line);
			String sender = line.split("<")[1].split(">")[0].trim();
			if (sender.equals(otherGuy))
				wholeText += "From :  \n\n";
			else
				wholeText += "To :  \n\n";
				
			wholeText += line.split(">")[1].trim() + "\n\n";
		}
	}
	
	@SuppressWarnings("unchecked")
	public static void createScreenshot() throws InterruptedException, IOException {
		//initialize the frame
		frame = new JFrame("");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		main = new Main();
		main.setFocusable(true);
		
		//add graphics to frame
		Container pane = frame.getContentPane();
		pane.setLayout(new GridLayout());
		pane.add(main);
		
		//All important code
		
		//get target sms
		wholeText = wholeText.replace(BEGINNING, SEPARATOR);
		
		for (String message : wholeText.split(SEPARATOR)) {//separates each file
			if (message.trim().isEmpty()) //remove empty lines -_-
				continue;
			List<String> allLines = StringUtilities.splitIntoLines(message.trim());//Array of each line of the string
			
			String justMessage = "";
			for (int i = 2; i < allLines.size(); i++)//justMessage becomes only the real message. no newlines because we will impose our own
				if (!allLines.get(i).trim().isEmpty())
					justMessage += allLines.get(i);
					
			List<String> messageLines0 = StringUtilities.wrap(justMessage.trim(), frame.getFontMetrics(normalFont), (int) (0.6 * frameSize.x));
			//list of lines, word wrapped well to avoid overflow
			
			ArrayList<String> messageLines = new ArrayList<String>();
			
			for (String s3 : messageLines0)//this is just transferring a list to an arraylist for ease of use
				messageLines.add(s3);
				
			if (messageLines.size() == 0) //failsafe for empty message. fairly unnecessary
				continue;
				
			//tasks
			//ask questions first
			
			Date datetime = null;
			try {
				String badDateTime = allLines.get(0);
				String dateString = "";
				for(int i = 2; i < badDateTime.split(" ").length; i++){
					dateString += badDateTime.split(" ")[i] + " ";
				}
				datetime = getDate(dateString.trim());
			} catch (ParseException e) {
				e.printStackTrace();
			} //full line, not wrapped
			String sender = (allLines.get(1).contains("From :  ")) ? otherGuy : "You";//full line, not wrapped
			textMessages.add(new Text(datetime, sender, messageLines));//add the Text object to the full list
			
		}
		
		//Setting up the frame height (should be in method){
		frameSize.setLocation(frameSize.x,
		
		paintTitleTest(0));
		
		long date = -1;
		for (Text sms : textMessages) {
			if (sms.getDatetime().getTime() / 86400000 != date) {
				date = sms.getDatetime().getTime() / 86400000;
				frameSize.setLocation(frameSize.x, paintTitleTest(frameSize.y));
			}
			frameSize.setLocation(frameSize.x, paintSMSTest(frameSize.y, sms));
		}
		
		frameSize.setLocation(frameSize.x, frameSize.y + frame.getFontMetrics(normalFont).getHeight());
		
		//}
		
		//set frame parameters
		frame.setSize(new Dimension(frameSize.x, frameSize.y));
		frame.setPreferredSize(new Dimension(frameSize.x, frameSize.y));
		frame.setMaximumSize(new Dimension(frameSize.x, frameSize.y));
		frame.setMinimumSize(new Dimension(frameSize.x, frameSize.y));
		frame.pack();
		
		//thread-safety pause
		try {
			Thread.sleep(100);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		
		//set frame to visible
		frame.setVisible(true);
		frame.setFont(normalFont);
		
		try {
			saveAsImage();
		} catch (NullPointerException e) {}
	}
	
	@SuppressWarnings({ "unchecked", "deprecation" })
	private static void printData() {
		/*
		 * Data:
		 * Number of messages total
		 * Average continuous characters (avg char / message) for each person
		 * Number of messages for each person
		 */
		
		wholeText = wholeText.replace(BEGINNING, SEPARATOR);
		ArrayList<String> fromMe = new ArrayList<String>();
		ArrayList<String> toMe = new ArrayList<String>();
		String prevSender = "";
		ArrayList<String> prevMessage = new ArrayList<String>();
		HashMap<String, Integer> dates = new HashMap<String, Integer>();
		
		for (String message : wholeText.split(SEPARATOR)) {//separates each file
			if (message.trim().isEmpty()) //remove empty lines -_-
				continue;
			List<String> allLines = StringUtilities.splitIntoLines(message.trim());//Array of each line of the string
			
			String datetime = null;
			datetime = allLines.get(0).split("-")[0] + "- 00:00:00 AM";
			
			if (dates.containsKey(datetime))
				dates.put(datetime, dates.get(datetime) + 1);
			else
				dates.put(datetime, 1);
				
			String sender = (allLines.get(1).contains("From :  ")) ? otherGuy : "You";//full line, not wrapped
			
			allLines.remove(0);
			allLines.remove(0);
			
			if (sender.equals(prevSender)) {
				String l = "";
				for (String s : allLines)
					l += s;
				prevMessage.add(l);
			} else {
				if (prevSender.equals(otherGuy))
					toMe.addAll(prevMessage);
				else
					fromMe.addAll(prevMessage);
				prevMessage.clear();
				prevSender = sender;
				String l = "";
				for (String s : allLines)
					l += s;
				prevMessage.add(l);
			}
		}
		
		if (prevSender.equals(otherGuy))
			toMe.addAll(prevMessage);
		else
			fromMe.addAll(prevMessage);
			
		int fromMe_messageCount = fromMe.size();
		int fromMe_charCount = 0;
		int toMe_messageCount = toMe.size();
		int toMe_charCount = 0;
		
		for (String message : fromMe)
			fromMe_charCount += message.length();
			
		for (String message : toMe)
			toMe_charCount += message.length();
			
		String output = "";
		
		DecimalFormat df = new DecimalFormat("#.00");
		
		output += "Total Messages: " + (fromMe_messageCount + toMe_messageCount) + "\n\n";
		output += "Your Messages: " + fromMe_messageCount + "\n";
		output += otherGuy + "'s Messages: " + toMe_messageCount + "\n\n";
		output += "Your Characters: " + fromMe_charCount + "\n";
		output += otherGuy + "'s Characters: " + toMe_charCount + "\n\n";
		output += "Your Average Characters per Message: " + df.format(((double) fromMe_charCount / fromMe_messageCount)) + "\n";
		output += otherGuy + "'s Average Characters per Message: " + df.format(((double) toMe_charCount / toMe_messageCount)) + "\n\n";
		
		ArrayList<Integer> datesList = new ArrayList<Integer>(dates.values());
		Collections.sort(datesList);
		
		int index = (int) (datesList.size() * 0.95);
		
		int bigDate = datesList.get(index);
		
		output += "Important dates:\n";
		for (String s : dates.keySet()) {
			//System.out.println(dates.get(s));
			if (dates.get(s) >= bigDate) {
				Date d = null;
				try {
					d = getDate(s);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				output += (d.getMonth() + 1) + "/" + d.getDate() + "/" + String.valueOf(d.getYear()).substring(1) + " (" + dates.get(s) + ")\n";
			}
		}
		
		System.out.println(output);
		JOptionPane.showMessageDialog(null, output, "HI", JOptionPane.PLAIN_MESSAGE);
	}
	
	@SuppressWarnings("deprecation")
	@Override
	public void paint(Graphics g) {//graphics code goes here
		int y = 0;
		g.clearRect(0, 0, frameSize.x, frameSize.y);
		g.setColor(OFF_WHITE);
		g.fillRect(0, 0, frameSize.x, frameSize.y);
		y = paintTitle(g, y, otherGuy);
		
		long date = -1;
		//iterate between all texts in the conversation
		for (Text sms : textMessages) {
			//anytime the date changes, write out a title 
			if (sms.getDatetime().getTime() / 86400000 != date) {
				Date realdate = sms.getDatetime();
				date = realdate.getTime() / 86400000;
				String formattedDate = getDayName(realdate.getDay()) + " - " + (realdate.getMonth() + 1) + "/" + realdate.getDate() + "/" + String.valueOf(realdate.getYear()).substring(1);
				y = paintTitle(g, y, formattedDate);
			}
			//write out the text
			y = paintSMS(g, y, sms);
		}
	}
	
	public int paintTitle(Graphics g, int y, String title) {
		g.setFont(titleFont);
		int height = g.getFontMetrics().getHeight();
		g.setColor(GREEN);
		//draw title box
		g.fillRect(0, y, frame.getWidth(), (int) (1.5 * height));
		g.setColor(Color.WHITE);
		//draw string
		g.drawString(title, (int) (0.5 * frame.getWidth() - 0.5 * g.getFontMetrics().stringWidth(title)), y + height);
		//give the box a margin
		y += (int) (1.5 * height);
		y += g.getFontMetrics(normalFont).getHeight() / 2;
		return y;
	}
	
	public int paintSMS(Graphics g, int y, Text sms) {
		g.setFont(normalFont);
		
		int width = 0;
		//gets the width that the text box should be
		for (int i = 0; i < sms.getMessage().size(); i++) {
			String s = sms.getMessage().get(i);
			width = Math.max(width, g.getFontMetrics().stringWidth(s));
		}
		//pads text box
		width += 50;
		
		if (sms.getSender().equals("You")) {
			g.setColor(GREY);
			//display from the right side
			g.fillRoundRect(frame.getWidth() - width, y, width, sms.getMessage().size() * g.getFontMetrics().getHeight() + g.getFontMetrics().getHeight() / 2, 10, 10);
			g.setColor(BLACK);
			
			for (int i = 0; i < sms.getMessage().size(); i++) {//draw every line of the text
				String s = sms.getMessage().get(i);
				g.drawString(s, frame.getWidth() - width + 25, y + g.getFontMetrics().getHeight());
				y += g.getFontMetrics().getHeight();
			}
		} else {//Them
			g.setColor(Color.WHITE);
			//display from the left side
			g.fillRoundRect(0, y, width, sms.getMessage().size() * g.getFontMetrics().getHeight() + g.getFontMetrics().getHeight() / 2, 10, 10);
			g.setColor(BLACK);
			for (int i = 0; i < sms.getMessage().size(); i++) {//draw every line of text
				String s = sms.getMessage().get(i);
				g.drawString(s, 25, y + g.getFontMetrics().getHeight());
				y += g.getFontMetrics().getHeight();
			}
		}
		//one-line height margin under text
		y += g.getFontMetrics().getHeight();
		return y;
	}
	
	public static int paintTitleTest(int y) {//outputs same y value, draws nothing
		frame.setFont(titleFont);
		int height = frame.getFontMetrics(frame.getFont()).getHeight();
		y += (int) (1.5 * height);
		y += frame.getFontMetrics(normalFont).getHeight() / 2;
		return y;
	}
	
	public static int paintSMSTest(int y, Text sms) {//same y result as original
		frame.setFont(normalFont);
		for (int i = 0; i < sms.getMessage().size(); i++) {
			y += frame.getFontMetrics(frame.getFont()).getHeight();
		}
		y += frame.getFontMetrics(frame.getFont()).getHeight();
		return y;
	}
	
	public static void saveAsImage() throws InterruptedException {
		BufferedImage bi = new BufferedImage(frameSize.x, frameSize.y, BufferedImage.TYPE_INT_ARGB);
		Graphics g = bi.createGraphics();
		
		//https://community.oracle.com/thread/1492928?start=0&tstart=0
		main.paint(g);//this == JComponent
		g.dispose();
		System.out.println(bi.getHeight());
		if (pngFileName.trim().isEmpty())
			pngFileName = "yourConversation - Text to Text";
			
		try {
			ImageIO.write(bi, "png", new File(pngFileName.split("\\.")[0] + ".png"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("finished");
		Thread.sleep(8000);//wait to make sure the file is completely created
	}
	
	public static Date getDate(String datetime) throws ParseException {//gets Date object from string date
		return new SimpleDateFormat("EEE dd MMM yyyy - hh:mm:ss aa").parse(datetime);
	}
	
	public static String getDayName(int day) {//gets day name from day #
		String[] days = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
		return days[day];
	}
	
}